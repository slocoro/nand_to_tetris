/**
 * Implements the Square Crash game.
 * This simple game allows the user to move a black square around
 * the screen.
 * When the game starts, a square of 15 by 15 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The game finishes if the user crashes the square into the wall.
 */

class SquareGame {
   field Square square; // the square of this game
   field Wall wall; // the wall you need to avoid
   field int direction; // the square's current direction:
                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field boolean exit;

   /** Constructs a new square dance game. */
   constructor SquareGame new() {
      // The initial square is located in (0,0), has size 30, and is not moving.
      let square = Square.new(0, 0, 15);
      let wall = Wall.new(240, 80, 100);
      let direction = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do wall.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user

      while (~exit) {
         // waits for a key to be pressed
	 // at first no key is pressed (key=0) so remains in this loop
	 // moveSquare does nothing if key=0
	 // once a key is pressed it exits out of this loop
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveSquare();
            do checkCollision();
         }

         if (key = 81)  { let exit = true; }     // q key
         // if (key = 90)  { do square.decSize(); } // z key
         // if (key = 88)  { do square.incSize(); } // x key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
	 // square keeps moving after key is released because the movement is based
	 // on the direction var which doesn't get reset when no key is pressed
	 // it only gets reset once another arrow key is pressed
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSquare();
            do checkCollision();
         }

     } // while
     return;
   }

   method void checkCollision() {
      // collision logic
      // if square goes right
      // if right side of square touches left side of wall then exit=true
      // if square goes left
      // if left side of square touches right side off wall then exit=true
      // need these conditions for up/down too

      var int squareLeft, squareRight, wallLeft, wallRight;
      var int squareTop, squareBottom, wallTop, wallBottom;

      let squareLeft = square.getLeft();
      let squareRight = square.getRight();
      let wallLeft = wall.getLeft();
      let wallRight = wall.getRight();
      let squareTop = square.getTop();
      let squareBottom = square.getBottom();
      let wallTop = wall.getTop();
      let wallBottom = wall.getBottom();

      if ((squareRight > wallLeft)
         & (squareBottom > wallTop)
	 & (squareTop < wallBottom)
	 & (direction = 4)) {
         let exit = true;
      }
      if ((squareLeft < wallRight)
         & (squareBottom > wallTop)
	 & (squareTop < wallBottom)
	 & (direction = 3)) {
         let exit = true;
      }
      if ((squareLeft < wallRight)
         & (squareRight > wallLeft)
	 & (squareTop < wallBottom)
	 & (direction = 1)) {
         let exit = true;
      }
      if ((squareLeft < wallRight)
         & (squareRight > wallLeft)
	 & (squareBottom > wallTop)
	 & (direction = 2)) {
         let exit = true;
      }

      if (exit) {
         do Output.moveCursor(9,15);
         do Output.printString("Game Over: You crashed into a wall!");
         do Sys.halt();
      }
      return;
   }
}



